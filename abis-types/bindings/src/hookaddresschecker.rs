/**

Generated by the following Solidity interface...
```solidity
interface HookAddressChecker {
    function angstrom_address_valid(address addr) external pure returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "angstrom_address_valid",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod HookAddressChecker {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506102258061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80639a0c7f6c1461002d575b5f80fd5b61004061003b3660046101e5565b610054565b604051901515815260200160405180910390f35b5f61005e82610064565b92915050565b5f81613000811661007757505f92915050565b610800811661008857505f92915050565b61040081161561009a57505f92915050565b61020081166100ab57505f92915050565b6101008116156100bd57505f92915050565b608081166100cd57505f92915050565b60408116151580156100e157506004811615155b6100ed57505f92915050565b61011073ffffffffffffffffffffffffffffffffffffffff821662800000610117565b9392505050565b5f6080831615801561012b57506008831615155b1561013757505f61005e565b6040831615801561014a57506004831615155b1561015657505f61005e565b610400831615801561016a57506002831615155b1561017657505f61005e565b610100831615801561018a57506001831615155b1561019657505f61005e565b73ffffffffffffffffffffffffffffffffffffffff8316156101d457613fff83161515806101cf57506280000062ffffff831614610110565b610110565b5062ffffff16628000001415919050565b5f602082840312156101f5575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610110575f80fdfea164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x02%\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\x9A\x0C\x7Fl\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x01\xE5V[a\0TV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[_a\0^\x82a\0dV[\x92\x91PPV[_\x81a0\0\x81\x16a\0wWP_\x92\x91PPV[a\x08\0\x81\x16a\0\x88WP_\x92\x91PPV[a\x04\0\x81\x16\x15a\0\x9AWP_\x92\x91PPV[a\x02\0\x81\x16a\0\xABWP_\x92\x91PPV[a\x01\0\x81\x16\x15a\0\xBDWP_\x92\x91PPV[`\x80\x81\x16a\0\xCDWP_\x92\x91PPV[`@\x81\x16\x15\x15\x80\x15a\0\xE1WP`\x04\x81\x16\x15\x15[a\0\xEDWP_\x92\x91PPV[a\x01\x10s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16b\x80\0\0a\x01\x17V[\x93\x92PPPV[_`\x80\x83\x16\x15\x80\x15a\x01+WP`\x08\x83\x16\x15\x15[\x15a\x017WP_a\0^V[`@\x83\x16\x15\x80\x15a\x01JWP`\x04\x83\x16\x15\x15[\x15a\x01VWP_a\0^V[a\x04\0\x83\x16\x15\x80\x15a\x01jWP`\x02\x83\x16\x15\x15[\x15a\x01vWP_a\0^V[a\x01\0\x83\x16\x15\x80\x15a\x01\x8AWP`\x01\x83\x16\x15\x15[\x15a\x01\x96WP_a\0^V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x01\xD4Wa?\xFF\x83\x16\x15\x15\x80a\x01\xCFWPb\x80\0\0b\xFF\xFF\xFF\x83\x16\x14a\x01\x10V[a\x01\x10V[Pb\xFF\xFF\xFF\x16b\x80\0\0\x14\x15\x91\x90PV[_` \x82\x84\x03\x12\x15a\x01\xF5W_\x80\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x01\x10W_\x80\xFD\xFE\xA1dsolcC\0\x08\x1A\0\n",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c80639a0c7f6c1461002d575b5f80fd5b61004061003b3660046101e5565b610054565b604051901515815260200160405180910390f35b5f61005e82610064565b92915050565b5f81613000811661007757505f92915050565b610800811661008857505f92915050565b61040081161561009a57505f92915050565b61020081166100ab57505f92915050565b6101008116156100bd57505f92915050565b608081166100cd57505f92915050565b60408116151580156100e157506004811615155b6100ed57505f92915050565b61011073ffffffffffffffffffffffffffffffffffffffff821662800000610117565b9392505050565b5f6080831615801561012b57506008831615155b1561013757505f61005e565b6040831615801561014a57506004831615155b1561015657505f61005e565b610400831615801561016a57506002831615155b1561017657505f61005e565b610100831615801561018a57506001831615155b1561019657505f61005e565b73ffffffffffffffffffffffffffffffffffffffff8316156101d457613fff83161515806101cf57506280000062ffffff831614610110565b610110565b5062ffffff16628000001415919050565b5f602082840312156101f5575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610110575f80fdfea164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\x9A\x0C\x7Fl\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x01\xE5V[a\0TV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[_a\0^\x82a\0dV[\x92\x91PPV[_\x81a0\0\x81\x16a\0wWP_\x92\x91PPV[a\x08\0\x81\x16a\0\x88WP_\x92\x91PPV[a\x04\0\x81\x16\x15a\0\x9AWP_\x92\x91PPV[a\x02\0\x81\x16a\0\xABWP_\x92\x91PPV[a\x01\0\x81\x16\x15a\0\xBDWP_\x92\x91PPV[`\x80\x81\x16a\0\xCDWP_\x92\x91PPV[`@\x81\x16\x15\x15\x80\x15a\0\xE1WP`\x04\x81\x16\x15\x15[a\0\xEDWP_\x92\x91PPV[a\x01\x10s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16b\x80\0\0a\x01\x17V[\x93\x92PPPV[_`\x80\x83\x16\x15\x80\x15a\x01+WP`\x08\x83\x16\x15\x15[\x15a\x017WP_a\0^V[`@\x83\x16\x15\x80\x15a\x01JWP`\x04\x83\x16\x15\x15[\x15a\x01VWP_a\0^V[a\x04\0\x83\x16\x15\x80\x15a\x01jWP`\x02\x83\x16\x15\x15[\x15a\x01vWP_a\0^V[a\x01\0\x83\x16\x15\x80\x15a\x01\x8AWP`\x01\x83\x16\x15\x15[\x15a\x01\x96WP_a\0^V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x01\xD4Wa?\xFF\x83\x16\x15\x15\x80a\x01\xCFWPb\x80\0\0b\xFF\xFF\xFF\x83\x16\x14a\x01\x10V[a\x01\x10V[Pb\xFF\xFF\xFF\x16b\x80\0\0\x14\x15\x91\x90PV[_` \x82\x84\x03\x12\x15a\x01\xF5W_\x80\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x01\x10W_\x80\xFD\xFE\xA1dsolcC\0\x08\x1A\0\n",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `angstrom_address_valid(address)` and selector `0x9a0c7f6c`.
```solidity
function angstrom_address_valid(address addr) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct angstrom_address_validCall {
        #[allow(missing_docs)]
        pub addr: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`angstrom_address_valid(address)`](angstrom_address_validCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct angstrom_address_validReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<angstrom_address_validCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: angstrom_address_validCall) -> Self {
                    (value.addr,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for angstrom_address_validCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addr: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<angstrom_address_validReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: angstrom_address_validReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for angstrom_address_validReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for angstrom_address_validCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = angstrom_address_validReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "angstrom_address_valid(address)";
            const SELECTOR: [u8; 4] = [154u8, 12u8, 127u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HookAddressChecker`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum HookAddressCheckerCalls {
        #[allow(missing_docs)]
        angstrom_address_valid(angstrom_address_validCall),
    }
    #[automatically_derived]
    impl HookAddressCheckerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[154u8, 12u8, 127u8, 108u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HookAddressCheckerCalls {
        const NAME: &'static str = "HookAddressCheckerCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::angstrom_address_valid(_) => {
                    <angstrom_address_validCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<HookAddressCheckerCalls>] = &[
                {
                    fn angstrom_address_valid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HookAddressCheckerCalls> {
                        <angstrom_address_validCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HookAddressCheckerCalls::angstrom_address_valid)
                    }
                    angstrom_address_valid
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::angstrom_address_valid(inner) => {
                    <angstrom_address_validCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::angstrom_address_valid(inner) => {
                    <angstrom_address_validCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HookAddressChecker`](self) contract instance.

See the [wrapper's documentation](`HookAddressCheckerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HookAddressCheckerInstance<T, P, N> {
        HookAddressCheckerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HookAddressCheckerInstance<T, P, N>>,
    > {
        HookAddressCheckerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        HookAddressCheckerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`HookAddressChecker`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HookAddressChecker`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HookAddressCheckerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for HookAddressCheckerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HookAddressCheckerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HookAddressCheckerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`HookAddressChecker`](self) contract instance.

See the [wrapper's documentation](`HookAddressCheckerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HookAddressCheckerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> HookAddressCheckerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HookAddressCheckerInstance<T, P, N> {
            HookAddressCheckerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HookAddressCheckerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`angstrom_address_valid`] function.
        pub fn angstrom_address_valid(
            &self,
            addr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, angstrom_address_validCall, N> {
            self.call_builder(&angstrom_address_validCall { addr })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HookAddressCheckerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
