{"abi":[{"type":"function","name":"multicall","inputs":[{"name":"data","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"results","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"multicall(bytes[])":"ac9650d8"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` is passed onto all subcalls, even if a previous subcall has consumed the ether. Subcalls can instead use `address(this).value` to see the available ETH, and consume it using {value: x}.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"IMulticall_v4\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Interface for the Multicall_v4 contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v4-periphery/src/interfaces/IMulticall_v4.sol\":\"IMulticall_v4\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":21000},\"remappings\":[\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":core/src/=src/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":solady/src/=lib/solady/src/\",\":solmate/=lib/solmate/\",\":super-sol/=lib/super-sol/src/\",\":transient-goodies/=lib/transient-goodies/src/\",\":v4-core/src/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/src/=lib/v4-periphery/src/\"]},\"sources\":{\"lib/v4-periphery/src/interfaces/IMulticall_v4.sol\":{\"keccak256\":\"0x336bec303f7ff86497d2679464c5adad5040f412b3d0769ce5e1d2a42f7e2c08\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7734f047d98d331c8abc51ad9f358ceee0a6dcae8d89ac49084b84de0d2d42e7\",\"dweb:/ipfs/QmWij2h7mU36LsXhb9P6pkYXrSCua4ixeWaVFSrsEcEmPQ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"stateMutability":"payable","type":"function","name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}]}],"devdoc":{"kind":"dev","methods":{"multicall(bytes[])":{"details":"The `msg.value` is passed onto all subcalls, even if a previous subcall has consumed the ether. Subcalls can instead use `address(this).value` to see the available ETH, and consume it using {value: x}.","params":{"data":"The encoded function data for each of the calls to make to this contract"},"returns":{"results":"The results from each of the calls passed in via data"}}},"version":1},"userdoc":{"kind":"user","methods":{"multicall(bytes[])":{"notice":"Call multiple functions in the current contract and return the data from all of them if they all succeed"}},"version":1}},"settings":{"remappings":["@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","core/src/=src/","ds-test/=lib/solmate/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","openzeppelin-contracts/=lib/openzeppelin-contracts/","permit2/=lib/v4-periphery/lib/permit2/","solady/src/=lib/solady/src/","solmate/=lib/solmate/","super-sol/=lib/super-sol/src/","transient-goodies/=lib/transient-goodies/src/","v4-core/src/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/src/=lib/v4-periphery/src/"],"optimizer":{"enabled":true,"runs":21000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"lib/v4-periphery/src/interfaces/IMulticall_v4.sol":"IMulticall_v4"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/v4-periphery/src/interfaces/IMulticall_v4.sol":{"keccak256":"0x336bec303f7ff86497d2679464c5adad5040f412b3d0769ce5e1d2a42f7e2c08","urls":["bzz-raw://7734f047d98d331c8abc51ad9f358ceee0a6dcae8d89ac49084b84de0d2d42e7","dweb:/ipfs/QmWij2h7mU36LsXhb9P6pkYXrSCua4ixeWaVFSrsEcEmPQ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/v4-periphery/src/interfaces/IMulticall_v4.sol","id":70341,"exportedSymbols":{"IMulticall_v4":[70340]},"nodeType":"SourceUnit","src":"32:742:127","nodes":[{"id":70328,"nodeType":"PragmaDirective","src":"32:23:127","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":70340,"nodeType":"ContractDefinition","src":"134:639:127","nodes":[{"id":70339,"nodeType":"FunctionDefinition","src":"679:92:127","nodes":[],"documentation":{"id":70330,"nodeType":"StructuredDocumentation","src":"164:510:127","text":"@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` is passed onto all subcalls, even if a previous subcall has consumed the ether.\n Subcalls can instead use `address(this).value` to see the available ETH, and consume it using {value: x}.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"},"functionSelector":"ac9650d8","implemented":false,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"688:9:127","parameters":{"id":70334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70333,"mutability":"mutable","name":"data","nameLocation":"715:4:127","nodeType":"VariableDeclaration","scope":70339,"src":"698:21:127","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":70331,"name":"bytes","nodeType":"ElementaryTypeName","src":"698:5:127","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":70332,"nodeType":"ArrayTypeName","src":"698:7:127","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"697:23:127"},"returnParameters":{"id":70338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70337,"mutability":"mutable","name":"results","nameLocation":"762:7:127","nodeType":"VariableDeclaration","scope":70339,"src":"747:22:127","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":70335,"name":"bytes","nodeType":"ElementaryTypeName","src":"747:5:127","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":70336,"nodeType":"ArrayTypeName","src":"747:7:127","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"746:24:127"},"scope":70340,"stateMutability":"payable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IMulticall_v4","contractDependencies":[],"contractKind":"interface","documentation":{"id":70329,"nodeType":"StructuredDocumentation","src":"57:77:127","text":"@title IMulticall_v4\n @notice Interface for the Multicall_v4 contract"},"fullyImplemented":false,"linearizedBaseContracts":[70340],"name":"IMulticall_v4","nameLocation":"144:13:127","scope":70341,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":127}